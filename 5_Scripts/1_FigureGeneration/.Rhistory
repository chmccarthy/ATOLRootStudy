# Check packages.
required <- c("ggplot2", "ggtree", "patchwork", "wesanderson")
missing <- required[!(required %in% installed.packages()[, "Package"])]
if(length(missing)) {
install.packages(missing)
}
# Load packages.
library(ggplot2)
library(ggtree)
library(patchwork)
library(wesanderson)
# Load trees for example image: sp = Species tree, t1 = tree that recover clan,
# t2 = tree that can't recover clan, t3 = tree that only has 1 taxon from clan.
sp <- read.tree(text="((((A,B),(C,D)),((E,F), H)));")
t1 <- read.tree(text="(((A,B),D),E,F);")
t2 <- read.tree(text="(((A,B),C),(D,E),F);")
t3 <- read.tree(text="((E,F),H,A);")
# Highlight A+B+C+D clan in species tree and example trees.
sp <- groupOTU(sp, c("A", "B", "C", "D"), "Clan")
t1 <- groupOTU(t1, c("A", "B", "C", "D"), "Clan")
t2 <- groupOTU(t2, c("A", "B", "C", "D"), "Clan")
t3 <- groupOTU(t3, c("A"), "Clan")
# Draw species and example trees
s1 <- ggtree(sp, aes(color=Clan)) + geom_tiplab() + theme(legend.position = "none", plot.title = element_text(hjust=0.5)) + ggtitle("Species tree") +
xlab("\"Incontestable\" clan (A+B+C+D) to be assessed by clan_check.") + scale_color_manual(values=c("black", "#46ACC8"))
g1 <- ggtree(t1, aes(color=Clan), layout="daylight", branch.length = "none") + geom_tiplab() + hexpand(0.5) +
theme(legend.position = "none") + scale_color_manual(values=c("black", "#46ACC8")) +
xlab("Gene tree recovers clan (A+B+D) congruent with clan (A+B+C+D).") + ggtitle("Unrooted gene trees")
g2 <- ggtree(t2, aes(color=Clan), layout="daylight") + geom_tiplab() + hexpand(0.5) +
xlab("Gene tree can't recover clan (A+B+C+D), no split exists where taxa A-D separate from taxa E-F.") +
scale_color_manual(values=c("black", "#E2D200")) + theme(legend.position = "none")
g3 <- ggtree(t3, aes(color=Clan), layout="daylight") + geom_tiplab() + hexpand(0.5) +
xlab("Gene tree can't recover clan (A+B+C+D), <2 member taxa present in gene tree.") +
scale_color_manual(values=c("black", "#DD8D29")) + theme(legend.position = "none")
# create a dataset
sets <- c(rep("Chang2015", 15), rep("Whelan2015D10", 15), rep("Whelan2015D20", 15), rep("Simion2017", 15), rep("Whelan2017MCRS", 15))
clans <- c(rep("Outgroups" , 3) , rep("Porifera" , 3) , rep("Ctenophora" , 3) , rep("Cnidaria" , 3), rep("Bilateria", 3) )
status <- rep(c("Recovered" , "Not Recovered" , "<2 taxa") , 5)
value <- c(c(71,129, 0), c(8, 192, 0), c(197, 3, 0), c(17, 183, 0), c(38, 162, 0),
c(58,152,0), c(13, 197, 0), c(181, 18, 11), c(41, 168, 1), c(46, 162, 2),
c(44, 134, 0), c(15, 162, 1), c(143,15, 20), c(31, 147, 0), c(39, 137, 2),
c(655, 1064, 0), c(98, 1621, 0), c(1635, 84, 0), c(502, 1216, 1), c(447, 1271, 1),
c(92, 33, 2), c(11, 116, 0), c(40, 25, 62), c(53, 74, 0), c(57, 70, 0))
data <- data.frame(sets,clans,status,value)
data$clans_f <- factor(data$clans, levels=c("Outgroups", "Porifera", "Ctenophora", "Cnidaria", "Bilateria"))
data$status_f <- factor(data$status, levels=c("<2 taxa", "Not Recovered", "Recovered"))
data$sets_f <- factor(data$sets, levels=c("Chang2015", "Whelan2015D10", "Whelan2015D20", "Simion2017", "Whelan2017MCRS"))
ogs <- c("Chang_2015 (200 OGs)", "Whelan2015_D10 (210 OGs)", "Whelan2015_D20 (178 OGs)", "Simion2017 (1719 OGs)", "Whelan2017_MCRS (127 OGs)")
names(ogs) <- levels(data$sets_f)
# Stacked + percent
p <- ggplot(data, aes(fill=status_f, x=clans_f, y=value)) +
geom_bar(position="fill", stat="identity", colour = "black") +
geom_text(data=subset(data,value > 5),aes(x=clans_f, y=value, label=value), size=5, position=position_fill(vjust = 0.5)) +
facet_wrap(~sets_f, ncol=5, scales = "free_x", labeller=labeller(sets_f = ogs)) +
scale_fill_manual(values=wes_palette(n=3, name="FantasticFox1")) + theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), legend.position = "right",
strip.text.x = element_text(size=10),
axis.text.y=element_text(angle=25, hjust=1), axis.text.x=element_text(angle=25, hjust=1)) +
labs(y = "% of OGs in Dataset", x = "Clans tested (excl. Placozoa)") + scale_y_continuous(labels = scales::percent)
plot((s1 | g1 + g2 + g3 + plot_layout(nrow=3, ncol=1)) / p)
# Check packages.
required <- c("ggplot2", "ggtree", "patchwork", "wesanderson")
missing <- required[!(required %in% installed.packages()[, "Package"])]
if(length(missing)) {
install.packages(missing)
}
# Load packages.
library(ggplot2)
library(ggtree)
library(patchwork)
library(wesanderson)
# Load trees for example image: sp = Species tree, t1 = tree that recover clan,
# t2 = tree that can't recover clan, t3 = tree that only has 1 taxon from clan.
sp <- read.tree(text="((((A,B),(C,D)),((E,F), H)));")
t1 <- read.tree(text="(((A,B),D),E,F);")
t2 <- read.tree(text="(((A,B),C),(D,E),F);")
t3 <- read.tree(text="((E,F),H,A);")
# Highlight A+B+C+D clan in species tree and example trees.
sp <- groupOTU(sp, c("A", "B", "C", "D"), "Clan")
t1 <- groupOTU(t1, c("A", "B", "C", "D"), "Clan")
t2 <- groupOTU(t2, c("A", "B", "C", "D"), "Clan")
t3 <- groupOTU(t3, c("A"), "Clan")
# Draw species and example trees, define colour scheme for
# recovered / not recovered / <2 taxa as in bar chart below.
s1 <- ggtree(sp, aes(color=Clan)) + geom_tiplab() + theme(legend.position = "none", plot.title = element_text(hjust=0.5)) + ggtitle("Species tree") +
xlab("\"Incontestable\" clan (A+B+C+D) to be assessed by clan_check.") + scale_color_manual(values=c("black", "#46ACC8"))
g1 <- ggtree(t1, aes(color=Clan), layout="daylight", branch.length = "none") + geom_tiplab() + hexpand(0.5) +
theme(legend.position = "none") + scale_color_manual(values=c("black", "#46ACC8")) +
xlab("Gene tree recovers clan (A+B+D) congruent with clan (A+B+C+D).") + ggtitle("Unrooted gene trees")
g2 <- ggtree(t2, aes(color=Clan), layout="daylight") + geom_tiplab() + hexpand(0.5) +
xlab("Gene tree can't recover clan (A+B+C+D), no split exists where taxa A-D separate from taxa E-F.") +
scale_color_manual(values=c("black", "#E2D200")) + theme(legend.position = "none")
g3 <- ggtree(t3, aes(color=Clan), layout="daylight") + geom_tiplab() + hexpand(0.5) +
xlab("Gene tree can't recover clan (A+B+C+D), <2 member taxa present in gene tree.") +
scale_color_manual(values=c("black", "#DD8D29")) + theme(legend.position = "none")
# Generate data for clan_check results in five AToL datasets.
sets <- c(rep("Chang2015", 15), rep("Whelan2015D10", 15), rep("Whelan2015D20", 15), rep("Simion2017", 15), rep("Whelan2017MCRS", 15))
clans <- c(rep("Outgroups" , 3) , rep("Porifera" , 3) , rep("Ctenophora" , 3) , rep("Cnidaria" , 3), rep("Bilateria", 3) )
status <- rep(c("Recovered" , "Not Recovered" , "<2 taxa") , 5)
value <- c(c(71,129, 0), c(8, 192, 0), c(197, 3, 0), c(17, 183, 0), c(38, 162, 0),
c(58,152,0), c(13, 197, 0), c(181, 18, 11), c(41, 168, 1), c(46, 162, 2),
c(44, 134, 0), c(15, 162, 1), c(143,15, 20), c(31, 147, 0), c(39, 137, 2),
c(655, 1064, 0), c(98, 1621, 0), c(1635, 84, 0), c(502, 1216, 1), c(447, 1271, 1),
c(92, 33, 2), c(11, 116, 0), c(40, 25, 62), c(53, 74, 0), c(57, 70, 0))
data <- data.frame(sets,clans,status,value)
# Add some factoring for ggplot and facet_wrap.
data$clans_f <- factor(data$clans, levels=c("Outgroups", "Porifera", "Ctenophora", "Cnidaria", "Bilateria"))
data$status_f <- factor(data$status, levels=c("<2 taxa", "Not Recovered", "Recovered"))
data$sets_f <- factor(data$sets, levels=c("Chang2015", "Whelan2015D10", "Whelan2015D20", "Simion2017", "Whelan2017MCRS"))
ogs <- c("Chang_2015 (200 OGs)", "Whelan2015_D10 (210 OGs)", "Whelan2015_D20 (178 OGs)", "Simion2017 (1719 OGs)", "Whelan2017_MCRS (127 OGs)")
names(ogs) <- levels(data$sets_f)
# Draw faceted, stacked barcharts for clan_check results across five datasets.
p <- ggplot(data, aes(fill=status_f, x=clans_f, y=value)) +
geom_bar(position="fill", stat="identity", colour = "black") +
geom_text(data=subset(data,value > 5),aes(x=clans_f, y=value, label=value), size=5, position=position_fill(vjust = 0.5)) +
facet_wrap(~sets_f, ncol=5, scales = "free_x", labeller=labeller(sets_f = ogs)) +
scale_fill_manual(values=wes_palette(n=3, name="FantasticFox1")) + theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), legend.position = "right",
strip.text.x = element_text(size=10),
axis.text.y=element_text(angle=25, hjust=1), axis.text.x=element_text(angle=25, hjust=1)) +
labs(y = "% of OGs in Dataset", x = "Clans tested (excl. Placozoa)") + scale_y_continuous(labels = scales::percent)
# Plot clan_check example figures on top, clan_check results below.
plot((s1 | g1 + g2 + g3 + plot_layout(nrow=3, ncol=1)) / p)
# Check packages.
required <- c("ggplot2", "wesanderson")
missing <- required[!(required %in% installed.packages()[, "Package"])]
if(length(missing)) {
install.packages(missing)
}
# Load packages.
library(ggplot2)
library(wesanderson)
# Generate data for results of topological support test (AU results added in Inkscape).
sets <- c(rep("Chang2015", 9), rep("Whelan2015_D10", 9), rep("Whelan2015_D20", 9), rep("Simion2017", 9), rep("Whelan2017_MCRS", 9))
status <- c(rep("Original", 3), rep("Passed clan_check filter", 3), rep("Failed clan_check filter", 3))
tops <- rep(c("Porifera-sister", "Ctenophore-sister", "Paranimalia"), 5)
values <- c(c(39, 113, 48), c(6, 24, 4), c(39-6, 113-24, 48-4),
c(37, 144, 29), c(6, 29, 5), c(31, 144-29, 29-5),
c(39, 113, 26), c(7, 20, 2), c(32, 92, 25),
c(397, 995, 327), c(93, 286, 79), c(397-93, 995-286, 327-79),
c(31, 76, 20), c(11, 21, 10), c(31-11, 76-21, 20-10))
# Do some factoring for ggplot.
d <- data.frame(sets, status, tops, values)
d$top_f <- factor(d$tops, levels=c("Paranimalia", "Ctenophore-sister", "Porifera-sister"))
d$status_f <- factor(d$status, levels=c("Original", "Failed clan_check filter", "Passed clan_check filter"))
d$sets_f <- factor(d$sets, levels=c("Chang2015", "Whelan2015_D10", "Whelan2015_D20", "Simion2017", "Whelan2017_MCRS"))
e <- d
# Draw faceted, stacked barcharts for topology test results.
p <- ggplot(e, aes(fill=top_f, y=values, x=status_f)) +
geom_bar(position="fill", stat="identity", colour = "black") + facet_grid(cols = vars(sets_f)) +
geom_text(data=subset(e,values > 0),aes(y=values, x=status_f, label=values), size=6, position=position_fill(vjust = 0.5)) +
scale_fill_manual(values=c("#00A08A", "#FAD510", "#0883bf")) + theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), axis.text.x=element_text(angle=45, hjust=1, size=10),axis.text.y=element_text(size=10)) +
labs(x = "Subset", y = "% of OGs supporting AToL hypothesis") + scale_y_continuous(labels = scales::percent)
# Plot barcharts.
plot(p)
library(cowplot)
library(ggplot2)
library(ggridges)
library(dplyr)
library(reshape2)
library(patchwork)
genppa <- function(x){
dist <- c(rnorm(500, mean=as.numeric(x[5]), sd=as.numeric(x[6])))
return(list(dist))
}
longify <- function(x){
rl <- list()
for(row in 1:nrow(x)){
r <- x[row,]
l <- unlist(x[row,][8])
for (rep in l){
n <- c(r[1:7], rep)
names(n)[8] <- "Replicate"
rl[[length(rl)+1]] <- n
}
}
return(rl)
}
p <- read.csv("ppas.csv", header=T)
p$dist <- apply(p, 1, genppa)
d <- longify(p)
f <- as.data.frame(do.call(rbind, d))
f$Obs <- as.numeric(f$Obs)
f$Pred <- as.numeric(f$Pred)
f$SD <- as.numeric(f$SD)
f$Replicates <- as.numeric(f$Replicates)
f$Replicate <- as.numeric(f$Replicate)
f$Status <- factor(f$Status, levels=(c("Original", "Filtered")))
f$Statistic <- factor(f$Statistic, levels=(c("PPA-DIV", "PPA-CONV", "PPA-VAR", "PPA-MAX", "PPA-MEAN")))
f$Dataset <- factor(f$Dataset, levels=c("Chang2015", "Whelan2015_D10", "Whelan2015_D20", "Simion2017", "Whelan2017_MCRS"))
f$Z <- apply(f, 1, function(x){return((as.numeric(x[4]) - as.numeric(x[5]))/as.numeric(x[6]))})
o <- subset(f, Statistic == "PPA-DIV")
g1 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), axis.title.x=element_blank())
o <- subset(f, Statistic == "PPA-CONV")
g2 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), axis.title.x=element_blank())
o <- subset(f, Statistic == "PPA-VAR")
g3 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), axis.title.x=element_blank(),  strip.text.x = element_blank())
o <- subset(f, Statistic == "PPA-MAX")
g4 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), strip.text.x = element_blank()) +
labs(x = "Predicted range of simulated replicates")
o <- subset(f, Statistic == "PPA-MEAN")
g5 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(),  strip.text.x = element_blank()) +
labs(x = "Predicted range of simulated replicates")
plot(g1 / g4 | g) + plot_layout(widths = c(2,1))
library(cowplot)
library(ggplot2)
library(ggridges)
library(dplyr)
library(reshape2)
library(patchwork)
genppa <- function(x){
dist <- c(rnorm(500, mean=as.numeric(x[5]), sd=as.numeric(x[6])))
return(list(dist))
}
longify <- function(x){
rl <- list()
for(row in 1:nrow(x)){
r <- x[row,]
l <- unlist(x[row,][8])
for (rep in l){
n <- c(r[1:7], rep)
names(n)[8] <- "Replicate"
rl[[length(rl)+1]] <- n
}
}
return(rl)
}
p <- read.csv("ppas.csv", header=T)
p$dist <- apply(p, 1, genppa)
d <- longify(p)
f <- as.data.frame(do.call(rbind, d))
f$Obs <- as.numeric(f$Obs)
f$Pred <- as.numeric(f$Pred)
f$SD <- as.numeric(f$SD)
f$Replicates <- as.numeric(f$Replicates)
f$Replicate <- as.numeric(f$Replicate)
f$Status <- factor(f$Status, levels=(c("Original", "Filtered")))
f$Statistic <- factor(f$Statistic, levels=(c("PPA-DIV", "PPA-CONV", "PPA-VAR", "PPA-MAX", "PPA-MEAN")))
f$Dataset <- factor(f$Dataset, levels=c("Chang2015", "Whelan2015_D10", "Whelan2015_D20", "Simion2017", "Whelan2017_MCRS"))
f$Z <- apply(f, 1, function(x){return((as.numeric(x[4]) - as.numeric(x[5]))/as.numeric(x[6]))})
o <- subset(f, Statistic == "PPA-DIV")
g1 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), axis.title.x=element_blank())
o <- subset(f, Statistic == "PPA-CONV")
g2 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), axis.title.x=element_blank())
o <- subset(f, Statistic == "PPA-VAR")
g3 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), axis.title.x=element_blank(),  strip.text.x = element_blank())
o <- subset(f, Statistic == "PPA-MAX")
g4 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(), strip.text.x = element_blank()) +
labs(x = "Predicted range of simulated replicates")
o <- subset(f, Statistic == "PPA-MEAN")
g5 <- ggplot(o, aes(x=Replicate, y=Status, group=Status)) + geom_density_ridges(scale = 0.8, fill = "lightblue") +
geom_segment(aes(x = Obs, y = as.numeric(Status) + 0.2, xend = Obs, yend = Status),
colour = "red", stat = "unique", arrow = arrow(length = unit(0.2, "cm"))) +
geom_label(aes(x = Obs, y = as.numeric(Status) + 0.7,
label = paste0("|Z| = ", as.character(abs(round(Z, 2))))),
stat = "unique", colour = "black", hjust="inward") +
facet_grid(rows = vars(Statistic), cols = vars(Dataset), scales="free") +
theme_bw() +
theme(panel.grid.minor = element_blank(), legend.title = element_blank(),  strip.text.x = element_blank()) +
labs(x = "Predicted range of simulated replicates")
plot(g1 / g4 | g) + plot_layout(widths = c(2,1))
